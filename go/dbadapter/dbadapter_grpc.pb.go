// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: dbadapter.proto

package dbadapter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBAdapterClient is the client API for DBAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBAdapterClient interface {
	Load(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Tasks, error)
	LoadSorted(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Tasks, error)
	Store(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Task, error)
}

type dBAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewDBAdapterClient(cc grpc.ClientConnInterface) DBAdapterClient {
	return &dBAdapterClient{cc}
}

func (c *dBAdapterClient) Load(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/DBAdapter/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBAdapterClient) LoadSorted(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/DBAdapter/LoadSorted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBAdapterClient) Store(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/DBAdapter/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBAdapterServer is the server API for DBAdapter service.
// All implementations must embed UnimplementedDBAdapterServer
// for forward compatibility
type DBAdapterServer interface {
	Load(context.Context, *Filter) (*Tasks, error)
	LoadSorted(context.Context, *Filter) (*Tasks, error)
	Store(context.Context, *Tasks) (*Task, error)
	mustEmbedUnimplementedDBAdapterServer()
}

// UnimplementedDBAdapterServer must be embedded to have forward compatible implementations.
type UnimplementedDBAdapterServer struct {
}

func (UnimplementedDBAdapterServer) Load(context.Context, *Filter) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedDBAdapterServer) LoadSorted(context.Context, *Filter) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSorted not implemented")
}
func (UnimplementedDBAdapterServer) Store(context.Context, *Tasks) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDBAdapterServer) mustEmbedUnimplementedDBAdapterServer() {}

// UnsafeDBAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBAdapterServer will
// result in compilation errors.
type UnsafeDBAdapterServer interface {
	mustEmbedUnimplementedDBAdapterServer()
}

func RegisterDBAdapterServer(s grpc.ServiceRegistrar, srv DBAdapterServer) {
	s.RegisterService(&DBAdapter_ServiceDesc, srv)
}

func _DBAdapter_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBAdapterServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBAdapter/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBAdapterServer).Load(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBAdapter_LoadSorted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBAdapterServer).LoadSorted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBAdapter/LoadSorted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBAdapterServer).LoadSorted(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBAdapter_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBAdapterServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBAdapter/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBAdapterServer).Store(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

// DBAdapter_ServiceDesc is the grpc.ServiceDesc for DBAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DBAdapter",
	HandlerType: (*DBAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _DBAdapter_Load_Handler,
		},
		{
			MethodName: "LoadSorted",
			Handler:    _DBAdapter_LoadSorted_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _DBAdapter_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbadapter.proto",
}
